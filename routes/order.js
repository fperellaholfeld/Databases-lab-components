const express = require('express');
const router = express.Router();
const sql = require('mssql');
const moment = require('moment');

router.get('/', function(req, res, next) {
    res.setHeader('Content-Type', 'text/html');
    res.write('<title>Tasty Texts Order Processing</title>');
    res.write('<style type=text/css> header {background-color: white; position: static; left: 0; right: 0;  top: 5px;  height: 30px;  display: flex;  align-items: center;  }  header * {  display: inline;  }  header li {  margin: 20px;  }  header li a {  color: blue;  text-decoration: none;  }  </style>');
    res.write('<h1 align="center"><font face="normal" color="#cf0921">Tasty Texts</font></h1><hr>');
    res.write('<header><nav><ul><li><a href="/"> Home </a></li><li><a href="/listprod"> Find Products </a></li><li><a href="/showcart"> Your Cart </a></li><li> <a href="/listorder"> Past orders </a></li></ul></nav></header>');
    res.write('<h1><font face="Helvetica" color="#db2323">Your Order Summary</font></h1>');
    

    let productList = false;
    if (req.session.productList && req.session.productList.length > 0) {
        productList = req.session.productList;
    }

    /**
    Determine if valid customer id was entered
    Determine if there are products in the shopping cart
    If either are not true, display an error message
    **/
    let customerId = req.query.customerId;

            if(!Number.isInteger(parseInt(customerId))){
                res.write('<h2>Invalid userID input! Please go back and try with Integers/Numbers</h2>')
                res.end();
            } else {
                customerId = parseInt(customerId);
            

    /** Make connection and validate **/
    (async function(){
        try{
            let pool = await sql.connect(dbConfig);

            let custIdQuery = 'USE tempdb; SELECT customerId FROM customer' ;
            let custIdRes = false;
            
            console.dir("test");
            custIdRes = await pool.request().input('customerId', sql.Int, customerId)
                    .query(custIdQuery + ' WHERE customerId=@customerId');

                    console.dir("Login?");
            if(!custIdRes.recordset[0].customerId){
                res.write('<h2>Invalid UserID! Please check your UserID and try again.</h2>')
            }else{
                for(let i = 0; i < productList.recordset.length; i++){
                    products = productList.recordset[i];
                    res.write(`<table><tr><td>Product Id</td><td>Product Name</td><td>Quantity</td><td>Price</td><td>Subtotal</td></tr>`);
                    res.write(`<tr><td>${products.productId}</td><td>${products.productName}</td><td>${products.quantity}</td><td>${products.productPrice}</td></tr>`)
                }
                res.write('</table>')
            }
            res.end()
        } catch(err) {
            console.dir(err)
            res.end();


        }
    }) }
    /** Save order information to database**/


        
        // Use retrieval of auto-generated keys.
        // sqlQuery = "INSERT INTO <TABLE> OUTPUT INSERTED.orderId VALUES( ... )";
        // let result = await pool.request()
        //     .input(...)
        //     .query(sqlQuery);
        // // Catch errors generated by the query
        // let orderId = result.recordset[0].orderId;
        
    
    /** Insert each item into OrderedProduct table using OrderId from previous INSERT **/

    /** Update total amount for order record **/

    /** For each entry in the productList is an array with key values: id, name, quantity, price **/

    for (let i = 0; i < productList.length; i++) {
            let product = products[i];
            if (!product) {
                continue;
            }
            // Use product.id, product.name, product.quantity, and product.price here
        }
    

    /** Print out order summary **/

    /** Clear session/cart **/

    res.end();
});

module.exports = router;